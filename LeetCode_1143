  public static int LCS(int m, int n, String a, String b, int[][] dp) {
        if (m == 0 || n == 0) {
            return 0;
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }
        if (a.charAt(m - 1) == b.charAt(n - 1)) {
            dp[m][n] = 1 + LCS(m - 1, n - 1, a, b, dp);
            return dp[m][n];
        } else {
            return dp[m][n]=Math.max(LCS(m - 1, n, a, b, dp), LCS(m, n - 1, a, b, dp));
        }
    }

    public int longestCommonSubsequence(String a, String b) {
        int m = a.length();
        int n = b.length();
       // System.out.println("Longest Common Subsequence");
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i < m + 1; i++) {
            for (int j = 0; j < n + 1; j++) {
                dp[i][j] = -1;
            }
        }

        int x = LCS(m, n, a, b, dp);
    return x;    
    }
