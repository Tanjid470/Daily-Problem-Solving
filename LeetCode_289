 static public int dfs(int[][] newboard, int i, int j) {
        int count_live = 0;
        for (int x = i - 1; x <= i + 1; x++) {
            for (int y = j - 1; y <= j + 1; y++) {
                try {
                    if (newboard[x][y] == 1) {
                        count_live++;
                    }
                } catch (Exception e) {
                    continue;
                }
            }
        }
        return newboard[i][j] == 1 ? count_live - 1 : count_live;
    }

    static public void gameOfLife(int[][] board) {
        int row = board.length;
        int col = board[0].length;
        int[][] newboard = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                newboard[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (newboard[i][j] == 1) {
                    int live = dfs(newboard, i, j);
                    if (live < 2 || live > 3) {
                        board[i][j] = 0;
                    }
                } else {
                    int live = dfs(newboard, i, j);
                    if (live == 3) {
                        board[i][j] = 1;
                    }
                }
            }
        }
    }
