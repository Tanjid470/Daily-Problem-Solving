static public int Fun(int r, int c, int[][] grid) {
        if (r >= grid.length - 1 || c >= grid[0].length-1 || r < 1 || c < 1) {
            return 0;
        }
        Set<Integer> set = new HashSet<>();
        //Duplicate check
        for (int i = r - 1; i <= r + 1; i++) {
            for (int j = c - 1; j <= c + 1; j++) {
                if (!set.add(grid[i][j])|| grid[i][j]>9) {
                    return 0;
                }
            }
        }
        
        //System.out.println("No  duplicate");
        for (int i = r - 1; i <= r + 1; i++) {
            int sum = 0;
            for (int j = c - 1; j <= c + 1; j++) {
                //System.out.print(grid[i][j]+" ");
                sum += grid[i][j];
            }
            //System.out.println("");
            if (sum != 15) {
                return 0;
            }
        }
        //System.out.println("Row ok");
        for (int j = c - 1; j <= c + 1; j++) {
            int sum = 0;
            for (int i = r - 1; i <= r + 1; i++) {
                sum += grid[i][j];
            }
            if (sum != 15) {
                return 0;
            }
        }
        //System.out.println("Col ok");
        int di1 = grid[r][c] + grid[r - 1][c - 1] + grid[r + 1][c + 1];
        int di2 = grid[r][c] + grid[r - 1][c + 1] + grid[r + 1][c - 1];
        if (di1 - di2 != 0) {
            return 0;
        }
        //System.out.println("Dio ok");
        return 1;
    }

    static public int numMagicSquaresInside(int[][] grid) {
        int r = grid.length;
        int c = grid[0].length;
        int count = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == 5) {
                    count += Fun(i, j, grid);
                }
            }
        }
        return count;
    }
