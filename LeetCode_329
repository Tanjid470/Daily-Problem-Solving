class Solution {
    public int[][] dp;
    public int dfs(int[][] matrix,int i,int j,int val){
        if(i<0 || i>matrix.length-1 || j<0 || j>matrix[0].length-1 || matrix[i][j]<=val){
            return 0;
        }
        if(dp[i][j]!=0) return dp[i][j];
        int r=dfs(matrix,i+1,j,matrix[i][j]);
        int l=dfs(matrix,i-1,j,matrix[i][j]);
        int d=dfs(matrix,i,j+1,matrix[i][j]);
        int u=dfs(matrix,i,j-1,matrix[i][j]);
        return dp[i][j]=1+Math.max(r,Math.max(l,Math.max(d,u)));
    }
    public int longestIncreasingPath(int[][] matrix) {
        int row=matrix.length;
        int col=matrix[0].length;
        int max=0;
        dp=new int[row][col];
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                int val=matrix[i][j];
                max=Math.max(max,dfs(matrix,i,j,-1));
            }
        }
    return max;
    }
}
